<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Health Guardians</title>
  <!-- hospital locator stuff -->
  <meta name='robots' content='noindex, nofollow'>
  <meta name='viewport' content='initial-scale=1,maximum-scale=1,user-scalable=no' />
  <link href='https://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700' rel='stylesheet'>
  <!-- Mapbox GL JS -->
  <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v2.0.1/mapbox-gl.js'></script>
  <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v2.0.1/mapbox-gl.css' rel='stylesheet' />
  <!-- Geocoder plugin -->
  <script
    src='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.2.0/mapbox-gl-geocoder.min.js'></script>
  <link rel='stylesheet'
    href='https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v4.2.0/mapbox-gl-geocoder.css'
    type='text/css' />
  <!-- Turf.js plugin -->
  <script src='https://npmcdn.com/@turf/turf/turf.min.js'></script>
  <!-- here in this script we are accessing the room id which is being generated and rendered from backend(server.js) this is a feature of ejs-->
  <script>
    const ROOM_ID = "<%= roomid %>"
  </script>
  <script defer src="https://unpkg.com/peerjs@1.3.1/dist/peerjs.min.js"></script>
  <script src="/socket.io/socket.io.js" defer></script>
  <script src="script.js" defer></script>
  <style>
    /* introsection css */
    @import url('https://fonts.googleapis.com/css2?family=Staatliches&display=swap');

    * {
      margin: 0;
      box-sizing: border-box;
      padding: 0;
    }

    #logo {
      font-size: 20px;
      display: flex;
      color: greenyellow;

      align-items: center;
      margin: 0px 14px;
      /* margin-right: 40px; */
    }

    #logo img {
      
      height: 42px;
      /* filter: invert(1); */
    }

    #navbar {

      background-color: black;
      padding: 13px 14px;

    }

    #navbar ul {

      display: flex;
      flex-direction: row;
      /* justify-content: center; */
      align-items: center;

    }

    #navbar li {
      list-style: none;
    }

    #navbar li a {
      color: #dbfa2b;
      text-decoration: none;
      padding: 12px 12px;
      font-size: 1.5rem;
      font-family: 'Staatliches', cursive;
    }

    #navbar li a:hover {
      background-color: rgb(5, 80, 39);
      border: 2px solid rgb(52, 197, 8);
      border-style: dotted;
      font-size: 2rem;

    }

    #introsection {
      color: #9af765;
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      background: center / cover no-repeat url("bg.jpg");
      height: 80px;
      background-color: rgb(4, 80, 8);
      font-family: 'Staatliches', cursive;
      font-size: 1.8rem;
      padding-bottom: 40px;
    }

    #introsection div.small {
      display: inline;
      margin-top: 15px;
      font-size: 47px;
    }

    #introsection div.big {
      display: inline;

      margin-top: 35px;
    }

    #pointer {
      border: 2px solid black;
      display: inline;
      margin-left: 15rem;
    }



    /* Hospital Locator Css*/
    body {
      color: #404040;
      font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
      margin: 0;
      padding: 0;
      -webkit-font-smoothing: antialiased;
    }

    * {
      -webkit-box-sizing: border-box;
      -moz-box-sizing: border-box;
      box-sizing: border-box;
    }

    #btn {
      padding: 10px 14px;
      background-color: rgb(67, 199, 15);
      border: 2px solid black;
      color: white;
      font-weight: bold;
      border-radius: 8px;
      cursor: pointer;
    }

    .sidebar {
      margin-top: 20vh;
      position: absolute;
      width: 33.3333%;
      height: 80%;
      top: 0;
      left: 0;
      overflow: hidden;
      border-right: 1px solid rgba(0, 0, 0, 0.25);
    }

    .pad2 {
      padding: 20px;
    }

    .map {
      margin-top: 20vh;
      position: absolute;
      left: 33.3333%;
      width: 66.6666%;
      top: 0;
      bottom: 0;
    }

    h1 {
      font-size: 22px;
      margin: 0;
      font-weight: 400;
      line-height: 20px;
      padding: 20px 2px;
    }

    a {
      color: #404040;
      text-decoration: none;
    }

    a:hover {
      color: #101010;
    }

    .heading {
      background: #fff;
      border-bottom: 1px solid #eee;
      min-height: 60px;
      line-height: 60px;
      padding: 0 10px;
      background-color: #00853e;
      color: #fff;
    }

    .listings {
      height: 100%;
      overflow: auto;
      padding-bottom: 60px;
    }

    .listings .item {
      display: block;
      border-bottom: 1px solid #eee;
      padding: 10px;
      text-decoration: none;
    }

    .listings .item:last-child {
      border-bottom: none;
    }

    .listings .item .title {
      display: block;
      color: #00853e;
      font-weight: 700;
    }

    .listings .item .title small {
      font-weight: 400;
    }

    .listings .item.active .title,
    .listings .item .title:hover {
      color: #8cc63f;
    }

    .listings .item.active {
      background-color: #f8f8f8;
    }

    ::-webkit-scrollbar {
      width: 3px;
      height: 3px;
      border-left: 0;
      background: rgba(0, 0, 0, 0.1);
    }

    ::-webkit-scrollbar-track {
      background: none;
    }

    ::-webkit-scrollbar-thumb {
      background: #00853e;
      border-radius: 0;
    }

    .marker {
      border: none;
      cursor: pointer;
      height: 56px;
      width: 56px;
      background-image: url(marker.png);
      background-color: rgba(0, 0, 0, 0);
    }

    .clearfix {
      display: block;
    }

    .clearfix:after {
      content: '.';
      display: block;
      height: 0;
      clear: both;
      visibility: hidden;
    }

    /* Marker tweaks */
    .mapboxgl-popup {
      padding-bottom: 50px;
    }

    .mapboxgl-popup-close-button {
      display: none;
    }

    .mapboxgl-popup-content {
      font: 400 15px/22px 'Source Sans Pro', 'Helvetica Neue', Sans-serif;
      padding: 0;
      width: 180px;
    }

    .mapboxgl-popup-content-wrapper {
      padding: 1%;
    }

    .mapboxgl-popup-content h3 {
      background: #91c949;
      color: #fff;
      margin: 0;
      display: block;
      padding: 10px;
      border-radius: 3px 3px 0 0;
      font-weight: 700;
      margin-top: -15px;
    }

    .mapboxgl-popup-content h4 {
      margin: 0;
      display: block;
      padding: 10px 10px 10px 10px;
      font-weight: 400;
    }

    .mapboxgl-popup-content div {
      padding: 10px;
    }

    .mapboxgl-container .leaflet-marker-icon {
      cursor: pointer;
    }

    .mapboxgl-popup-anchor-top>.mapboxgl-popup-content {
      margin-top: 15px;
    }

    .mapboxgl-popup-anchor-top>.mapboxgl-popup-tip {
      border-bottom-color: #91c949;
    }

    /* socket.io stuff */
    .container {
      margin-top: 80vh;
      display: grid;
      grid-gap: 0.4rem;
      grid-template-areas:
        'heading heading heading heading'
        'videosection videosection videosection mapsection'
      ;
    }



    #video-grid {
      display: grid;
      grid-template-columns: repeat(auto-fill, 300px);
      grid-auto-rows: 300px;
      grid-gap: 0.2rem;

    }

    video {
      width: 100%;
      height: 100%;
      object-fit: cover;
    }

    .gridds {
      background-color: rgb(166, 240, 169);
      border: 2px solid black;
    }

    .gridds h5 {
      color: black;
    }

    #video-grid {
      grid-area: videosection;
    }

    #map-grid {
      grid-area: mapsection;
    }

    .headings {
      margin-top: 10px;


      grid-area: heading;
    }

    #videoChat {
      font-size: 2rem;
      font-family: 'Staatliches', cursive;

      color: #2e4d06;
      margin-left: 5rem;
      display: inline;
    }

    #SelectedHospitalInfo {
      font-size: 2rem;

      font-family: 'Staatliches', cursive;

      color: #34530c;
      margin-left: 40rem;
      display: inline;
    }
  </style>
</head>

<body>
  <!-- welcome HTML -->
  <section id="introductionSec">
    <nav id="navbar">
      <ul>
        <div id="logo"><img>HG.
          <li><a href="/">Home</a></li>
          <li><a href="/">About</a></li>
          <li><a href="/">Services</a></li>
          <li><a href="/">Class info</a></li>
          <li><a href="/contact">Contact us</a> </li>
        </div>
      </ul>
    </nav>
    <section id="introsection">
      <div class="big">WELCOME TO THE HEALTH GUARDIANS APP.
        <div class="small">WE'RE HERE TO HELP!</div>
        <div id="pointer">Click Below Geocoding Button on Top-Right of Map</div>
      </div>
    </section>
  </section>
  <!-- Hospital Locator HTML -->
  <div class='sidebar'>
    <div class='heading'>
      <h1>HOSPITALS</h1>
    </div>
    <div id='listings' class='listings'></div>
  </div>
  <div id='map' class='map'>
  </div>

  <!-- Video Chat HTML -->
  <div class="container">
    <div class="headings">
      <h1 id="videoChat">Video-Chat</h1>
      <h1 id="SelectedHospitalInfo">Selected Hospital Info</h1>
    </div>
    <div id="video-grid" class="gridds"></div>

    <div id="map-grid" class="gridds">
      <h5>Hospital Address: </h5>
      <p id="hospital-name"></p>
      <h5>Hospital City: </h5>
      <p id="hospital_city"></p>
      <h5>Hospital Country: </h5>
      <p id="hospital_country"></p>
      <h5>Ambulance Latitude Coordinate: </h5>
      <p id="ambulance_lat"></p>
      <h5>Ambulance Longitude Coordinate: </h5>
      <p id="ambulance_lon"></p>
      <h5>Ambulance RealTime Update Count: </h5>
      <p id="ambulance_count"></p>
    </div>

  </div>

  <script>
    /* This will let you use the .remove() function later on */
    if (!('remove' in Element.prototype)) {
      Element.prototype.remove = function () {
        if (this.parentNode) {
          this.parentNode.removeChild(this);
        }
      };
    }

    mapboxgl.accessToken = 'pk.eyJ1IjoidHVzMjVkZWMiLCJhIjoiY2tqZm10Z2hxMGplMTJ2bnZpeG5yNm4yMyJ9.eLC25rG5a8uonCVDpnxKkQ';

    /**
     * Add the map to the page
    */

    var map = new mapboxgl.Map({
      container: 'map', // container id
      style: 'mapbox://styles/mapbox/streets-v11',
      center: [77.10, 28.70], // starting position
      zoom: 7// starting zoom
    });


    // stores is a geojson object to store hospital data
    var stores = {
      "type": "FeatureCollection",
      "features": [
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [
              77.2100,
              28.5672
            ]
          },
          "properties": {
            "phoneFormatted": "(011) 26588500",
            "phone": "011-26588500",
            "address": "AIIMS hospital",
            "city": "Delhi",
            "country": "INDIA",
            "crossStreet": "Sri Aurobindo Marg",
            "postalCode": "110029",
            "state": "Delhi"
          }
        },
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [
              77.1898,
              28.6392
            ]
          },
          "properties": {
            "phoneFormatted": "(011) 42254000",
            "phone": "011-42254000",
            "address": "Sir Ganga Ram Hospital",
            "city": "Delhi",
            "country": "INDIA",
            "crossStreet": "Old Rajinder Nagar",
            "postalCode": "110060",
            "state": "Delhi"
          }
        },
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [
              77.0266,
              28.4595
            ]
          },
          "properties": {
            "phoneFormatted": "(012) 44141414",
            "phone": "01244141414",
            "address": "Medanta Hospital",
            "city": "Gurugram",
            "country": "INDIA",
            "crossStreet": "CH Baktawar Singh Rd",
            "postalCode": "122001",
            "state": "Haryana"
          }
        },
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [
              77.3094,
              28.6840
            ]
          },
          "properties": {
            "phoneFormatted": "(011) 22586262",
            "phone": "011-22586262",
            "address": "Guru Teg Bahadur Hospital",
            "city": "Delhi",
            "country": "India",
            "crossStreet": " GTB Enclave",
            "postalCode": "110095",
            "state": "Delhi"
          }
        },
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [
              77.3068,
              28.3912
            ]
          },
          "properties": {
            "phoneFormatted": "(012) 97116000",
            "phone": "01297116000",
            "address": "Fortis Escorts Hospital",
            "city": "Faridabad",
            "country": "United States",
            "crossStreet": "Neelam Bata Rd",
            "postalCode": "121001",
            "state": "Haryana"
          }
        },
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [
              77.2350,
              28.6394
            ]
          },
          "properties": {
            "phoneFormatted": "(011) 23234242",
            "phone": "01123234242",
            "address": "G.B.Pant Hospital",
            "city": "Delhi",
            "country": "India",
            "postalCode": "110002",
            "state": "Delhi"
          }
        },
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [
              77.3178,
              28.4089
            ]
          },
          "properties": {
            "phoneFormatted": "(012) 94253000",
            "phone": "01294253000",
            "address": "Asian Institute of Medical Sciences",
            "cc": "India",
            "city": "Faridabad",
            "country": "India",
            "postalCode": "121001",
            "state": "Haryana"
          }
        },
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [
              77.2121,
              28.5276
            ]
          },
          "properties": {
            "phoneFormatted": "(011) 26515050",
            "phone": "01126515050",
            "address": "Max Hospital",
            "city": "Delhi",
            "country": "India",
            "crossStreet": "Press Enclave Marg",
            "postalCode": "110017",
            "state": "Delhi"
          }
        },
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [
              77.0746,
              28.4614
            ]
          },
          "properties": {
            "phoneFormatted": "(012) 6623000",
            "phone": "01246623000",
            "address": "Max Hospital",
            "city": "Delhi",
            "country": "India",
            "crossStreet": "Sushant Lok 1",
            "postalCode": "122001",
            "state": "Haryana"
          }
        },
        {
          "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [
              77.2830,
              28.5404
            ]
          },
          "properties": {
            "phoneFormatted": "(011) 71791090",
            "phone": "01171791090",
            "address": "Indraprastha Apollo Hospitals",
            "city": "Delhi",
            "country": "India",
            "postalCode": "110076",
            "state": "Delhi"
          }
        }
      ]
    };


    // Assign a unique id to each store. 

    stores.features.forEach(function (store, i) {
      store.properties.id = i;
    });

    /**
     * Wait until the map loads to make changes to the map.
    */
    map.on('load', function (e) {

      map.addSource("places", {
        "type": "geojson",
        "data": stores
      });



      /**
       * Add all the things to the page:
       * - The location listings on the side of the page
       * - The markers onto the map
      */
      buildLocationList(stores);
      addMarkers();

      /**
       * Listen for when a geocoder result is returned. When one is returned:
       * - Calculate distances
       * - Sort stores by distance
       * - Rebuild the listings
       * - Adjust the map camera
       * - Open a popup for the closest store
       * - Highlight the listing for the closest store.
      */


      /* Get the coordinate of the search result */
      var geolocate = new mapboxgl.GeolocateControl();

      map.addControl(geolocate);

      geolocate.on('geolocate', function (e) {
        var lon = e.coords.longitude;
        var lat = e.coords.latitude;
        // position is an array containing longitude and latitude values
        var position = [lon, lat];
        console.log(position);
        //searchResult is same as position
        var searchResult = position;
        console.log(searchResult);

        localStorage.setItem('client_cord', JSON.stringify(searchResult));

        /**
         * Calculate distances:
         * For each store, use turf.distance to calculate the distance
         * in Kilometres between the searchResult and the store. Assign the
         * calculated value to a property called `distance`.
        */
        // Object.defineproperty is to make a new property(key) in the object ( or modify property in object)
        var options = { units: 'kilometres' };
        stores.features.forEach(function (store) {
          Object.defineProperty(store.properties, 'distance', {
            value: turf.distance(searchResult, store.geometry, options),
            writable: true,
            enumerable: true,
            configurable: true
          });
        });

        /**
         * Sort stores by distance from closest to the `searchResult`
         * to furthest.
        */
        stores.features.sort(function (a, b) {
          if (a.properties.distance > b.properties.distance) {
            return 1;
          }
          if (a.properties.distance < b.properties.distance) {
            return -1;
          }
          return 0; // a must be equal to b
        });

        /**
         * Rebuild the listings:
         * Remove the existing listings and build the location
         * list again using the newly sorted stores.
        */
        var listings = document.getElementById('listings');
        while (listings.firstChild) {
          listings.removeChild(listings.firstChild);
        }
        buildLocationList(stores);

        /* Open a popup for the closest store. */
        createPopUp(stores.features[0]);

        /** Highlight the listing for the closest store. */
        var activeListing = document.getElementById('listing-' + stores.features[0].properties.id);
        activeListing.classList.add('active');
      });

      /**
       * Add a marker to the map for every store listing.
      **/
      function addMarkers() {
        /* For each feature in the GeoJSON object above: */
        // marker is each element
        stores.features.forEach(function (marker) {
          /* Create a div element for the marker. */
          var el = document.createElement('div');
          /* Assign a unique `id` to the marker. */
          el.id = "marker-" + marker.properties.id;
          /* Assign the `marker` class to each marker for styling. */
          el.className = 'marker';

          /**
           * Create a marker using the div element
           * defined above and add it to the map.
          **/
          new mapboxgl.Marker(el, { offset: [0, -23] })
            .setLngLat(marker.geometry.coordinates)
            .addTo(map);

          /**
           * Listen to the element(here element is marker) and when it is clicked, do three things(matlab when marker is clicked):
           * 1. Fly to the point
           * 2. Close all other popups and display popup for clicked store
           * 3. Highlight listing in sidebar (and remove highlight for all other listings)
          **/
          el.addEventListener('click', function (e) {
            flyToStore(marker);
            // 2.
            createPopUp(marker);
            var activeItem = document.getElementsByClassName('active');
            e.stopPropagation();
            if (activeItem[0]) {
              activeItem[0].classList.remove('active');
            }
            // 3.
            var listing = document.getElementById('listing-' + marker.properties.id);
            listing.classList.add('active');
          });
        });
      }

      /**
       * Add a listing for each store to the sidebar.
      **/
      function buildLocationList(data) {
        data.features.forEach(function (store, i) {
          // features is the array of "objects of data" in our var stores 
          // data.featues gives us the array of objects

          /**
           * Create a shortcut for `store.properties`,
           * which will be used several times below.
          **/
          var prop = store.properties;

          /* Add a new listing section to the sidebar. */
          var listings = document.getElementById('listings');
          var listing = listings.appendChild(document.createElement('div'));
          /* Assign a unique `id` to the listing. */
          listing.id = "listing-" + prop.id;
          /* Assign the `item` class to each listing for styling. */
          listing.className = 'item';

          /* Add the link to the individual listing created above. */
          var link = listing.appendChild(document.createElement('a'));
          link.href = '#';
          link.className = 'title';
          link.id = "link-" + prop.id;
          link.innerHTML = prop.address;

          /* Add details to the individual listing. */
          // details is a div inside a div 'listing' which is a div in 'listings'
          var details = listing.appendChild(document.createElement('div'));
          details.innerHTML = prop.city;
          if (prop.phone) {
            details.innerHTML += ' · ' + prop.phoneFormatted;
          }
          if (prop.distance) {
            var roundedDistance = Math.round(prop.distance * 100) / 100;
            details.innerHTML += '<p><strong>' + roundedDistance + ' Kilometres Away</strong></p>';
          }

          /**
           * Listen to the address element and when it is clicked, do four things:
           * 1. Update the `currentFeature` to the store associated with the clicked link
           * 2. Fly to the point
           * 3. Close all other popups and display popup for clicked store
           * 4. Highlight listing in sidebar (and remove highlight for all other listings)
          **/
          link.addEventListener('click', function (e) {
            for (var i = 0; i < data.features.length; i++) {
              if (this.id === "link-" + data.features[i].properties.id) {
                var clickedListing = data.features[i];
                flyToStore(clickedListing);
                createPopUp(clickedListing);
              }
            }
            var activeItem = document.getElementsByClassName('active');
            if (activeItem[0]) {
              activeItem[0].classList.remove('active');
            }
            this.parentNode.classList.add('active');
          });
        });
      }

      /**
       * Use Mapbox GL JS's `flyTo` to move the camera smoothly
       * a given center point.
      **/
      function flyToStore(currentFeature) {
        map.flyTo({
          center: currentFeature.geometry.coordinates,
          zoom: 15
        });
        console.log('Hospital Data: ', currentFeature)
        localStorage.setItem("hospital_address", currentFeature.properties.address);
        localStorage.setItem("hospital_city", currentFeature.properties.city);
        localStorage.setItem("hospital_country", currentFeature.properties.country);
        // console.log(currentFeature.geometry.coordinates[0])
        localStorage.setItem("hospital_lat", currentFeature.geometry.coordinates[0]);
        localStorage.setItem("hospital_lon", currentFeature.geometry.coordinates[1]);
        updateData();
      }

      /**
       * Create a Mapbox GL JS `Popup`.
      **/
      function createPopUp(currentFeature) {
        var popUps = document.getElementsByClassName('mapboxgl-popup');
        if (popUps[0]) popUps[0].remove();

        var popup = new mapboxgl.Popup({ closeOnClick: false })
          .setLngLat(currentFeature.geometry.coordinates)
          .setHTML('<h3>HOSPITAL</h3>' +
            '<h4>' + currentFeature.properties.address + '</h4>')
          .addTo(map);

        console.log('ambulance')
        showAmbulancePosition();

        sendEmailNotification();
        setInterval(realTimeUpdate, 5000);
        setInterval(clientCordUpdate, 5000);
        setInterval(showAmbulancePosition, 3000);
      }

      function sendEmailNotification() {
        var searchResultNew = localStorage.client_cord;
        var client_cord_new = JSON.parse(searchResultNew);
        var client_lat = client_cord_new[0];
        var client_long = client_cord_new[1];
        let request = new XMLHttpRequest()
        request.onreadystatechange = function () {
          if (this.readyState === 4) {
            console.log(this.status)
            console.log(this.responseText)
          }
        }
        request.open("POST", "https://events-api.notivize.com/applications/8efc47e2-84e5-49fd-809a-4617edabce67/event_flows/90e07ee9-16e2-4190-a111-c694e53f93a8/events", true)
        request.setRequestHeader("Content-Type", "application/json")
        request.send(JSON.stringify({
          'email': 'tushar17may@gmail.com',
          'Googlelink': `http://www.google.com/maps/place/${client_long},${client_lat}`,
          'lifecycle_stage': 'create',
          'Socketlink': `${window.location.href}`
        }))
      }

      var ambulanceLat = localStorage.hospital_lat;
      console.log(localStorage.hospital_lat)
      var ambulanceLon = localStorage.hospital_lon;
      var ambulanceRealTimeUpdate = 0;

      function showAmbulancePosition() {
        new mapboxgl.Marker().setLngLat([localStorage.hospital_lat, localStorage.hospital_lon]).addTo(map);


        // marker.remove();
      }
      function clientCordUpdate() {
        var searchResultNew = localStorage.client_cord;
        var client_cord_new = JSON.parse(searchResultNew);
        var client_lat = client_cord_new[0];
        var client_long = client_cord_new[1];
        new mapboxgl.Marker().setLngLat([client_lat, client_long]).addTo(map);
      }
      function realTimeUpdate() {
        localStorage.setItem('hospital_lat', localStorage.hospital_lat);
        localStorage.setItem('hospital_lon', localStorage.hospital_lon);
        ambulanceRealTimeUpdate = ambulanceRealTimeUpdate + 1;
        document.getElementById('ambulance_count').innerText = ambulanceRealTimeUpdate;
        console.log(localStorage.hospital_lat);
        // showAmbulancePosition();
      }
    });

    function updateData() {
      document.getElementById('hospital-name').innerText = localStorage.hospital_address;
      document.getElementById('hospital_city').innerText = localStorage.hospital_city;
      document.getElementById('hospital_country').innerText = localStorage.hospital_country;
      document.getElementById('ambulance_lat').innerText = localStorage.hospital_lat;
      document.getElementById('ambulance_lon').innerText = localStorage.hospital_lon;
    }


  </script>
</body>

</html>